name: Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: businessci
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: ðŸ›’ Checkout code
        uses: actions/checkout@v2

      - name: ðŸ“¦ Tar files
        run: tar -cvf source-${{ github.sha }}.tar .

      - name: ðŸ“¬ Caching`
        uses: actions/cache@v2
        with:
          path: |
            **/node_modules
            ${{ github.workspace }}/web/.next/cache
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: ðŸ”§ Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: ðŸ”§ Configure Amplify
        uses: ambientlight/amplify-cli-action@0.2.1
        with:
          amplify_command: configure
          amplify_env: dev
          amplify_cli_version: "4.41.2"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_INNOV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_INNOV }}
          AWS_REGION: us-east-1

      - name: ðŸ”§ Set up JDK for dynamodb-local
        uses: actions/setup-java@v1
        with:
          java-version: 13

      - name: ðŸ§° Install Serverless Framework
        run: npm install -g serverless

      - name: ðŸ”§ Serverless Authentication
        run: sls config credentials --provider aws --key ${{secrets.AWS_ACCESS_KEY_ID_INNOV}} --secret ${{secrets.AWS_SECRET_ACCESS_KEY_INNOV}}

      - name: ðŸ§° Install web dependencies
        run: npm --prefix=web install
      - name: ðŸ§° Install api dependencies
        run: npm --prefix=api install

      - name: ðŸ”§ Migrate postgres
        run: npm --prefix=api run db-migrate up -- -e ci

      - name: ðŸ§¹ Run web lint
        run: npm --prefix=web run lint
      - name: ðŸ§¹ Run api lint
        run: npm --prefix=api run lint

      - name: ðŸ§ª Run web tests
        run: npm --prefix=web run test
      - name: ðŸ§ª Run API tests
        run: npm --prefix=api run test
        env:
          DB_NAME_CI: businessci
          DB_PASSWORD_CI: postgres
          SKIP_DB_SETUP: true

      - name: ðŸ”§ Seed postgres for e2e tests
        run: ./scripts/seed-business-names.sh $DB_NAME
        env:
          DB_NAME: businessci
          PGPASSWORD: postgres

      - name: ðŸ”§ Build project for e2e tests
        run: npm --prefix=api run install-dynamo-local && npm --prefix=api start & npm --prefix=api run start:wiremock & npm --prefix=web run build --if-present
        env:
          API_BASE_URL: http://localhost:5000/dev
          DB_NAME: businessci
          DB_PASSWORD: postgres

      - name: ðŸ§ª Run e2e cypress tests
        uses: cypress-io/github-action@v2
        with:
          working-directory: web
          start: npm start
          wait-on: 'http://localhost:3000'
          record: true
        env:
          CYPRESS_API_BASE_URL: http://localhost:5000/dev
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_TEST_USER_EMAIL: ${{ secrets.CYPRESS_TEST_USER_EMAIL }}
          CYPRESS_TEST_USER_PASSWORD: ${{ secrets.CYPRESS_TEST_USER_PASSWORD }}
          CYPRESS_AWS_COGNITO_IDENTITY_POOL_ID: ${{ secrets.CYPRESS_AWS_COGNITO_IDENTITY_POOL_ID }}
          CYPRESS_AWS_USER_POOLS_ID: ${{ secrets.CYPRESS_AWS_USER_POOLS_ID }}
          CYPRESS_AWS_USER_POOLS_WEB_CLIENT_ID: ${{ secrets.CYPRESS_AWS_USER_POOLS_WEB_CLIENT_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ðŸ“¦ Publish source-code artifact
        uses: actions/upload-artifact@v2
        with:
          name: source-${{ github.sha }}
          path: ./source-${{ github.sha }}.tar

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment:
      name: dev
    steps:
      - name: ðŸ“¦ Download source package
        uses: actions/download-artifact@v2
        with:
          name: source-${{ github.sha }}
          path: ${{ github.workspace }}

      - name: ðŸ“¦ Untar source package
        run: tar -xvf source-${{ github.sha }}.tar

      - name: ðŸ”§ Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: ðŸ”§ Configure Amplify
        uses: ambientlight/amplify-cli-action@0.2.1
        with:
          amplify_command: configure
          amplify_env: dev
          amplify_cli_version: "4.41.2"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_INNOV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_INNOV }}
          AWS_REGION: us-east-1

      - name: ðŸ§° Install Serverless Framework
        run: npm install -g serverless

      - name: ðŸ”§ Serverless Authentication
        run: sls config credentials --provider aws --key ${{secrets.AWS_ACCESS_KEY_ID_INNOV}} --secret ${{secrets.AWS_SECRET_ACCESS_KEY_INNOV}}

      - name: ðŸ§° Install web dependencies
        run: npm --prefix=web install
      - name: ðŸ§° Install api dependencies
        run: npm --prefix=api install

      - name: ðŸš€ Deploy api with serverless
        run: serverless deploy --verbose --stage develop --region us-east-1
        working-directory: ./api
        env:
          STAGE: develop
          DB_USER: ${{ secrets.DB_USER_DEV }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD_DEV }}
          DB_NAME: ${{ secrets.DB_NAME_DEV }}
          DB_HOST: ${{ secrets.DB_HOST_DEV }}
          DB_ENV: aws-dev
          COGNITO_ARN: ${{ secrets.COGNITO_ARN_DEV }}
          VPC_SECURITY_GROUP_ID: ${{ secrets.VPC_SECURITY_GROUP_ID }}
          VPC_SUBNET_ID_1: ${{ secrets.VPC_SUBNET_ID_1 }}
          VPC_SUBNET_ID_2: ${{ secrets.VPC_SUBNET_ID_2 }}
          VPC_ID: ${{ secrets.VPC_ID }}
          USE_FAKE_LICENSE_CLIENT: ${{ secrets.USE_FAKE_LICENSE_CLIENT }}

      - name: ðŸ¦‹ run database migrations
        run: serverless invoke -f migrate --stage develop --region us-east-1
        working-directory: ./api

      - name: ðŸš€ Deploy web to AWS Amplify
        uses: ambientlight/amplify-cli-action@0.2.1
        with:
          amplify_command: publish
          amplify_env: dev
          amplify_cli_version: "4.41.2"
        env:
          API_BASE_URL: ${{ secrets.API_BASE_URL_AWS_DEV }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_INNOV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_INNOV }}
          AWS_REGION: us-east-1
