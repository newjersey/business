{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["log","type","console","bind","sections","Object","keys","schema","properties","App","props","state","page","document","querySelectorAll","className","forEach","el","querySelector","this","submit","e","localStorage","setItem","JSON","stringify","formData","length","setState","window","location","href","data","getItem","user","parse","email","onChange","onSubmit","onError","onClick","onBack","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"olFAIMA,EAAM,SAACC,GAAD,OAAUC,QAAQF,IAAIG,KAAKD,QAASD,IAE1CG,EAAWC,OAAOC,KAAKC,EAAOC,YAqErBC,E,kDAlEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,KAAM,GAFJ,E,gEAMjBC,SAASC,iBAAiB,oCAAoC,GAAGC,UAAY,W,2CAI7EF,SAASC,iBAAiB,oCAAoCE,SAAQ,SAASC,GAC7EA,EAAGF,UAAY,MAEjBF,SAASK,cAAc,SAAWd,EAASe,KAAKR,MAAMC,OAAOG,UAAY,W,+BAGlEK,EAAQC,GACfC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUL,EAAOM,WACnDP,KAAKR,MAAMC,KAAK,EAAIR,EAASuB,OAC/BR,KAAKS,SAAS,CACZhB,KAAMO,KAAKR,MAAMC,KAAO,IAG1BiB,OAAOC,SAASC,KAAO,c,6BAIpBX,EAAQC,GAOb,OANAC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUL,EAAOM,WACnDP,KAAKR,MAAMC,KAAK,EAAI,GACtBO,KAAKS,SAAS,CACZhB,KAAMO,KAAKR,MAAMC,KAAO,KAGrB,I,+BAKP,IAAIoB,EAAOV,aAAaW,QAAQ,YAC5BC,EAAOZ,aAAaW,QAAQ,eAShC,OARAD,EAAiB,cAATA,EAAwBR,KAAKW,MAAMH,GAAQ,IACnDE,EAAiB,cAATA,EAAwBV,KAAKW,MAAMD,GAAQ,KACvCA,EAAKE,QACflC,QAAQF,IAAIgC,IACZA,EAAOA,GAAQ,IACVE,KAAOF,EAAKE,MAAQ,GACzBF,EAAKE,KAAKE,MAAQF,EAAKE,OAGvB,eAAC,IAAD,CAAM7B,OAAQA,EACRQ,UAAS,eAAUI,KAAKR,MAAMC,MAC9ByB,SAAUrC,EAAI,WACdsC,SAAUnB,KAAKmB,SAASnC,KAAKgB,MAC7BO,SAAUM,EACVO,QAASvC,EAAI,UALnB,UAOGmB,KAAKR,MAAMC,KAAO,GACjB,mBAAGG,UAAU,kCAAkCyB,QAASrB,KAAKsB,OAAOtC,KAAKgB,MAAzE,kBAEF,wBAAQlB,KAAK,SAASc,UAAU,kBAAhC,yB,GA7DU2B,IAAMC,WCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1C,SAAS2C,eAAe,SAM1BZ,M","file":"static/js/main.b62d05d8.chunk.js","sourcesContent":["import React from 'react';\nimport Form from '@rjsf/core';\nimport schema from './form.json';\n\nconst log = (type) => console.log.bind(console, type);\n\nconst sections = Object.keys(schema.properties);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { page: 0 };\n  }\n\n  componentDidMount() {\n    document.querySelectorAll('#root > .field-object > fieldset')[0].className = 'active';\n  }\n\n  componentDidUpdate() {\n    document.querySelectorAll('#root > .field-object > fieldset').forEach(function(el) {\n      el.className = '';\n    });\n    document.querySelector('#root_' + sections[this.state.page]).className = 'active';\n  }\n\n  onSubmit(submit, e) {\n    localStorage.setItem('formData', JSON.stringify(submit.formData));\n    if (this.state.page+1 < sections.length) {\n      this.setState({\n        page: this.state.page + 1\n      });\n    } else {\n      window.location.href = '/roadmap/';\n    }\n  }\n\n  onBack(submit, e) {\n    localStorage.setItem('formData', JSON.stringify(submit.formData));\n    if (this.state.page+1 > 0) {\n      this.setState({\n        page: this.state.page - 1\n      });\n    }\n    return false;\n  }\n\n\n  render() {\n    let data = localStorage.getItem('formData');\n    let user = localStorage.getItem('gotrue.user')\n    data = (data !== 'undefined') ? JSON.parse(data) : {};\n    user = (user !== 'undefined') ? JSON.parse(user) : {};\n    if (user && user.email) {\n      console.log(data);\n      data = data || {};\n      data.user = data.user || {};\n      data.user.email = user.email;\n    }\n    return (\n      <Form schema={schema}\n            className={`page-${this.state.page}`}\n            onChange={log(\"changed\")}\n            onSubmit={this.onSubmit.bind(this)}\n            formData={data}\n            onError={log(\"errors\")}\n      >\n        {this.state.page > 0 &&\n          <a className=\"btn btn-default margin-right-sm\" onClick={this.onBack.bind(this)}>Back</a>\n        }\n        <button type=\"submit\" className=\"btn btn-primary\">Next</button>\n      </Form>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}